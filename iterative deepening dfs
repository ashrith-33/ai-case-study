import random
import time

class SoccerIDDFS:
    def __init__(self, rows, cols, defender_pos, defensive_zone, attackers, max_depth):
        self.rows = rows
        self.cols = cols
        self.defender_pos = defender_pos
        self.defensive_zone = defensive_zone  # (min_x, max_x, min_y, max_y)
        self.attackers = attackers  # List of attacker positions
        self.max_depth = max_depth
        self.directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up

    def is_valid(self, x, y):
        """Check if position is within the defensive zone."""
        min_x, max_x, min_y, max_y = self.defensive_zone
        return min_x <= x <= max_x and min_y <= y <= max_y

    def iddfs(self):
        """Iterative Deepening DFS to expand defensive coverage."""
        for depth in range(1, self.max_depth + 1):
            best_position = self.dfs(self.defender_pos, depth, set())
            if best_position:
                return best_position, depth  # Return first valid defensive position
        return self.defender_pos, self.max_depth  # If no better position found, stay put

    def dfs(self, position, depth, visited):
        """Depth-First Search with depth limit."""
        if depth == 0 or position in visited:
            return None

        visited.add(position)
        x, y = position
        closest_attacker = self.find_closest_attacker(position)

        if closest_attacker and self.distance(position, closest_attacker) <= depth:
            return position  # Stay here to block the attacker

        for dx, dy in self.directions:
            new_x, new_y = x + dx, y + dy
            if self.is_valid(new_x, new_y):
                result = self.dfs((new_x, new_y), depth - 1, visited)
                if result:
                    return result
        return None

    def find_closest_attacker(self, position):
        """Find the nearest attacker to the defender."""
        min_distance = float("inf")
        closest = None
        for attacker in self.attackers:
            dist = self.distance(position, attacker)
            if dist < min_distance:
                min_distance = dist
                closest = attacker
        return closest

    def distance(self, pos1, pos2):
        """Calculate Manhattan distance."""
        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])

    def move_attackers(self):
        """Randomly move attackers to simulate dynamic offensive play."""
        new_positions = []
        for attacker in self.attackers:
            move_x, move_y = random.choice(self.directions)
            new_x, new_y = attacker[0] + move_x, attacker[1] + move_y
            if 0 <= new_x < self.rows and 0 <= new_y < self.cols:
                new_positions.append((new_x, new_y))
            else:
                new_positions.append(attacker)
        self.attackers = new_positions  # Update attacker positions dynamically

# Example Usage
rows, cols = 10, 10  # 10x10 field
defender_start = (5, 5)  # Defender's starting position
defensive_zone = (3, 7, 3, 7)  # Allowed movement range (min_x, max_x, min_y, max_y)
attackers = [(7, 6), (6, 4), (4, 3)]  # Initial attacker positions
max_depth = 4  # Maximum depth for IDDFS

soccer_iddfs = SoccerIDDFS(rows, cols, defender_start, defensive_zone, attackers, max_depth)

# Run multiple times to simulate changing attacker positions
for _ in range(3):
    best_position, depth_used = soccer_iddfs.iddfs()
    print("Best Defensive Position:", best_position, "| Depth Used:", depth_used)
    soccer_iddfs.move_attackers()  # Simulate attackers moving
